{"version":3,"sources":["components/Node/Node.jsx","Algorithms/Helper/minHeap.js","Algorithms/dijkstra.js","Algorithms/depthFirstSearch.js","Algorithms/breadthFirstSearch.js","Algorithms/bestFirstSearch.js","components/VisualizerComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","toggleVisited","ref","current","className","togglePath","toggleReset","toggleStart","toggleFinish","state","extraclassName","React","createRef","this","row","col","isStart","isFinish","isVisited","isWall","isPath","onMouseDown","onMouseEnter","onMouseUp","id","Component","MinHeap","elements","getLeftChildIndex","parentIndex","getRightChildIndex","getParentIndex","childIndex","Math","floor","hasLeftChild","heapNode","length","hasRightChild","hasParent","getLeftChildData","getRightChildData","getParentData","extractMin","shift","minValue","lastValue","pop","unshift","heapifyDown","getMin","insert","node","push","heapifyUp","index","smallerChildIndex","distance","currentData","smallestChildData","currentIndex","parent","isEmpty","element","heap","updateUnvisitedNeighbours","grid","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","previousNode","hitEdge","getNeighbourNodes","getNeighbours","bestFirstSearch","startNode","finishNode","gridRow","distanceFromTarget","abs","UpdateDistance","visitedNodesInOrder","minHeap","currentNode","updateNeighbours","START_POS_ROW","START_POS_COL","FINISH_POS_ROW","FINISH_POS_COL","VisualizerComponent","handleMouseDown","newGrid","removeWall","setState","buildWall","mousePressed","handleMouseEnter","handleMouseUp","newNode","createNode","Infinity","clearVisitedNode","resetStartNode","resetFinishNode","resetWallNode","resetVisitedNode","console","log","nodeRef","animateDijkstra","visitedNodeInOrder","shortestPath","i","setTimeout","printShortestPath","visualizeDijkstra","visitedNodeOrder","closestNode","dijkstra","slice","getShortestPath","animateDepthFirstSearch","DFSPath","visualizeDepthFirstSearch","visitedNodes","stack","neighbourNodes","depthFirstSearch","getDFSPath","animateBreadthFirstSearch","visualizeBreadthFirstSearch","queue","breadthFristSearch","BFSPath","getBFSPath","animateBestFirstSearch","GBFSPath","visualizeBestFirstSearch","getGBFSPath","columnRow","rowRef","column","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","map","rowId","key","columnId","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a553781.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Node.css'\r\n\r\nexport class Node extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        extraclassName : ''\r\n      }\r\n\r\n      this.ref = React.createRef()\r\n    }\r\n  \r\n    //Toggle node to visited\r\n    toggleVisited = () => {\r\n      this.ref.current.className = 'node visited-node'\r\n    }\r\n\r\n    togglePath = () => {\r\n      this.ref.current.className = 'node path-node'\r\n    }\r\n\r\n    toggleReset = () => {\r\n      this.ref.current.className = 'node '\r\n    }\r\n\r\n    toggleStart = () => {\r\n      this.ref.current.className = 'node start-node'\r\n    }\r\n\r\n    toggleFinish = () => {\r\n      this.ref.current.className = 'node finish-node'\r\n    }\r\n\r\n    render() {\r\n        const {row, col, isStart, isFinish, isVisited, isWall, isPath, onMouseDown, onMouseEnter, onMouseUp} = this.props\r\n        //If current node is Start or target node then add additions css property to them\r\n        const extraclassName = (isPath)? 'path-node' : (isStart)? 'start-node' : (isFinish)? 'finish-node' : (isVisited) ? 'visited-node' : (isWall) ? 'wall-node' : ''\r\n        //console.log(extraclassName)\r\n        return (\r\n          <div ref={this.ref}\r\n            id={`node-${row}-${col}`}\r\n            className={`node ${extraclassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node\r\n","export class MinHeap {\r\n    \r\n        constructor(elements) {\r\n           this.heapNode = [];\r\n           //console.log(this.heapNode)\r\n           for(let element of elements){\r\n               \r\n               this.insert(element)\r\n           }\r\n         }\r\n\r\n         getLeftChildIndex = parentIndex => {\r\n           return parentIndex * 2 + 1;\r\n         };\r\n\r\n         getRightChildIndex = parentIndex => {\r\n           return parentIndex * 2 + 2;\r\n         };\r\n\r\n         getParentIndex = childIndex => {\r\n           return Math.floor((childIndex - 1) / 2);\r\n         };\r\n\r\n         hasLeftChild = parentIndex => {\r\n           return this.getLeftChildIndex(parentIndex) < this.heapNode.length;\r\n         };\r\n\r\n         hasRightChild = parentIndex => {\r\n           return this.getRightChildIndex(parentIndex) < this.heapNode.length;\r\n         };\r\n\r\n         hasParent = childIndex => {\r\n           return this.getParentIndex(childIndex) >= 0;\r\n         };\r\n\r\n         getLeftChildData = parentIndex => {\r\n           return this.heapNode[this.getLeftChildIndex(parentIndex)];\r\n         };\r\n\r\n         getRightChildData = parentIndex => {\r\n           return this.heapNode[this.getRightChildIndex(parentIndex)];\r\n         };\r\n\r\n         getParentData = childIndex => {\r\n           return this.heapNode[this.getParentIndex(childIndex)];\r\n         };\r\n\r\n         extractMin = () => {\r\n            \r\n           if(this.heapNode.length === 1){\r\n               return this.heapNode.shift();\r\n           }\r\n           if (this.heapNode.length !== 0) {\r\n             const minValue = this.heapNode.shift();\r\n             const lastValue = this.heapNode.pop();\r\n             this.heapNode.unshift(lastValue);\r\n             this.heapifyDown();\r\n             return minValue;\r\n           }\r\n         };\r\n\r\n         getMin = () => {\r\n           if (this.heapNode.length !== 0) {\r\n             return this.heapNode[0];\r\n           }\r\n         };\r\n\r\n         insert = node => {\r\n           this.heapNode.push(node);\r\n           this.heapifyUp();\r\n         };\r\n\r\n         heapifyDown = () => {\r\n           let index = 0\r\n           while(this.hasLeftChild(index)){\r\n               let smallerChildIndex = this.getLeftChildIndex(index)\r\n               if(this.hasRightChild(index) && this.getLeftChildData(index).distance > this.getRightChildData(index).distance){\r\n                   smallerChildIndex = this.getRightChildIndex(index)\r\n               }\r\n\r\n               let currentData = (this.heapNode[index])\r\n               let smallestChildData = (this.heapNode[smallerChildIndex])\r\n\r\n               if(currentData.distance < smallestChildData.distance){\r\n                    break;\r\n               }else{\r\n                    this.heapNode[smallerChildIndex] = currentData\r\n                    this.heapNode[index] = smallestChildData\r\n               }\r\n               index = smallerChildIndex\r\n           }\r\n         };\r\n\r\n         heapifyUp = () => {\r\n           let currentIndex = this.heapNode.length - 1;\r\n           while (this.hasParent(currentIndex)) {\r\n             let parentIndex = this.getParentIndex(currentIndex);\r\n             let parent = (this.heapNode[parentIndex]);\r\n             let current = (this.heapNode[currentIndex]);\r\n             if (current.distance < parent.distance) {\r\n               this.heapNode[parentIndex] = current;\r\n               this.heapNode[currentIndex] = parent;\r\n               currentIndex = parentIndex;\r\n             } else {\r\n               break;\r\n             }\r\n           }\r\n         };\r\n\r\n         isEmpty = () => {\r\n            return this.heapNode.length === 0\r\n         }\r\n}\r\n","import {MinHeap} from './Helper/minHeap'\r\nconst heap = new MinHeap([])\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    \r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodeOrder = []\r\n    startNode.distance = 0\r\n    //const unvisitedNodes = getAllNodes(grid)\r\n\r\n    heap.insert(startNode)\r\n    \r\n    while (!heap.isEmpty()) {\r\n        const closestNode = heap.extractMin()\r\n        if(closestNode.isVisited) continue\r\n        closestNode.isVisited = true;\r\n        //If the node is wall then ignore it\r\n        if(closestNode.isWall) continue\r\n        //If the start node is fully surrounded by wall\r\n        if(closestNode.distance === Infinity) return visitedNodeOrder\r\n        //If the node is visited then add it to the visited list\r\n        visitedNodeOrder.push(closestNode)\r\n        //If target node is found\r\n        if(closestNode === finishNode){\r\n            return visitedNodeOrder\r\n        }\r\n        //Update the distance and parent of the neighbouring nodes\r\n        updateUnvisitedNeighbours(closestNode, grid)\r\n    }\r\n\r\n    /*while (unvisitedNodes.length !== 0) {\r\n        sortUnvistedNodesByDistance(unvisitedNodes)\r\n        const closestNode = unvisitedNodes.shift()\r\n        \r\n        //const closestNode = heap.extractMin()\r\n        console.log(closestNode)\r\n        \r\n        if(closestNode.isVisited) continue\r\n\r\n        closestNode.isVisited = true;\r\n        //If the node is wall then ignore it\r\n        if(closestNode.isWall) continue\r\n        //If the start node is fully surrounded by wall\r\n        if(closestNode.distance === Infinity) return visitedNodeOrder\r\n        //If the node is visited then add it to the visited list\r\n        visitedNodeOrder.push(closestNode)\r\n        //If target node is found\r\n        if(closestNode === finishNode){\r\n            //heap.insert(visitedNodeOrder)\r\n            //console.log('min '+JSON.stringify(heap.extractMin()))\r\n            return visitedNodeOrder\r\n        }\r\n        //Update the distance and parent of the neighbouring nodes\r\n        updateUnvisitedNeighbours(closestNode, grid)\r\n    }*/\r\n}\r\n\r\n/*function sortUnvistedNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}*/\r\n\r\nfunction updateUnvisitedNeighbours(node, grid){\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(node, grid)\r\n    for(const neighbour of unvisitedNeighbours){\r\n        neighbour.distance = node.distance + 1\r\n        neighbour.previousNode = node\r\n        \r\n        heap.insert(neighbour)\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid){\r\n    const  neighbours = []\r\n    const {row, col} = node\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n\r\n    return neighbours.filter((neighbour) => (neighbour.isVisited === false))\r\n    /*console.log(neighbours.map((node) => console.log('['+node.row+\" \"+node.col+']'+' '+node.isVisited))+'neighbors of '+ node.row +\" \"+ node.col +\"= \")\r\n    return neighbours*/\r\n}\r\n\r\n/*function getAllNodes(grid){\r\n    const nodes = []\r\n    for(let row of grid){\r\n        for(let node of row){\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}*/\r\n\r\nexport function getShortestPath(finishNode){\r\n    const shortestPath = []\r\n     \r\n    //if there is no path\r\n     if(finishNode.previousNode === null)\r\n        return shortestPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode != null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        shortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return shortestPath\r\n}","var hitEdge = false\r\nexport function depthFirstSearch(grid, startNode, finishNode){\r\n    \r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodes = []\r\n    const stack = [startNode]\r\n    while(stack.length !== 0){\r\n        const currentNode = stack.pop()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodes.push(currentNode)\r\n        if(currentNode === finishNode)\r\n            return visitedNodes\r\n        const neighbourNodes = getNeighbourNodes(grid, currentNode)\r\n        for(const neighbour of neighbourNodes){\r\n            neighbour.previousNode = currentNode\r\n            stack.push(neighbour)\r\n        }\r\n    }\r\n\r\n    //If target not found\r\n    return visitedNodes\r\n}\r\n\r\nfunction getNeighbourNodes(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n    \r\n    if(hitEdge){\r\n        if(row > 0) neighbours.push(grid[row - 1][col])\r\n        if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n        if(col > 0) neighbours.push(grid[row][col - 1])\r\n        if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n        else{\r\n            hitEdge = false\r\n        }\r\n    }else{\r\n        if(col > 0) neighbours.push(grid[row][col - 1])\r\n        if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n        if(row > 0) neighbours.push(grid[row - 1][col])\r\n        if(row < grid.length - 1) \r\n            neighbours.push(grid[row + 1][col])\r\n        else\r\n            hitEdge = true\r\n    }\r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nexport function getDFSPath(finishNode){\r\n    const DFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return DFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        DFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return DFSPath\r\n}\r\n","\r\nexport function breadthFristSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodes = []\r\n    const queue = [startNode]\r\n    while(queue.length !== 0){\r\n        const currentNode = queue.shift()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodes.push(currentNode)\r\n        if(currentNode === finishNode) return visitedNodes\r\n        const neighbours = getNeighbours(grid, currentNode)\r\n        for(const neighbour of neighbours){\r\n            neighbour.previousNode = currentNode\r\n            queue.push(neighbour)\r\n        }\r\n    }\r\n\r\n    //If target not found\r\n    return visitedNodes\r\n}\r\n\r\nfunction getNeighbours(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n\r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nexport function getBFSPath(finishNode){\r\n    const BFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return BFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        BFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return BFSPath\r\n}\r\n","import {MinHeap} from './Helper/minHeap'\r\n\r\nexport function bestFirstSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n    \r\n    UpdateDistance(grid, finishNode)\r\n    //finishNode = grid[finishNode.row][finishNode.col]\r\n    //console.log(grid)\r\n\r\n    const visitedNodesInOrder = []\r\n    //startNode.distance = 0\r\n    const minHeap = new MinHeap([])\r\n    minHeap.insert(startNode)\r\n    while(!minHeap.isEmpty()){\r\n        const currentNode = minHeap.extractMin()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodesInOrder.push(currentNode)\r\n        if(currentNode === finishNode)\r\n            return visitedNodesInOrder\r\n        updateNeighbours(grid, currentNode, minHeap)\r\n    }\r\n    /*const priorityQueue = [startNode]\r\n    while(priorityQueue.length !== 0){\r\n        sortUnvistedNodesByDistance(priorityQueue)\r\n        const currentNode = priorityQueue.shift()\r\n        console.log(priorityQueue.length)\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodesInOrder.push(currentNode)\r\n        if(currentNode.row === finishNode.row && currentNode.col === finishNode.col){\r\n            console.log(currentNode)\r\n            console.log(finishNode)\r\n            return visitedNodesInOrder\r\n        }\r\n\r\n        const neighbours = getUnvisitedNeighbours(grid, currentNode)\r\n        for(const neighbour of neighbours){\r\n            neighbour.previousNode = currentNode\r\n            priorityQueue.push(neighbour)\r\n        }\r\n    }*/\r\n    return visitedNodesInOrder\r\n}\r\n\r\nfunction sortUnvistedNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(grid, node, minHeap){\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(grid, node)\r\n    for(let neighbour of unvisitedNeighbours){\r\n        //neighbour.distance = node.distance + 1\r\n        neighbour.previousNode = node\r\n        minHeap.insert(neighbour)\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n   \r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nfunction UpdateDistance (grid, finishNode){\r\n    const {row, col} = finishNode\r\n    for(let gridRow of grid){\r\n        for(let node of gridRow){\r\n            const distanceFromTarget = Math.abs(node.row - row) + Math.abs(node.col - col)\r\n            /*const newNode = {\r\n                ...node,\r\n                distance : distanceFromTarget\r\n            }*/\r\n            grid[node.row][node.col].distance = distanceFromTarget\r\n        }\r\n    }\r\n    return grid\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = []\r\n    for(let row of grid){\r\n        for(let node of row){\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n\r\nexport function getGBFSPath(finishNode){\r\n    const GBFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return GBFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        GBFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return GBFSPath\r\n}\r\n","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\nimport {dijkstra, getShortestPath} from '../Algorithms/dijkstra'\r\nimport {depthFirstSearch, getDFSPath} from '../Algorithms/depthFirstSearch'\r\nimport {breadthFristSearch, getBFSPath} from '../Algorithms/breadthFirstSearch'\r\nimport {bestFirstSearch, getGBFSPath} from '../Algorithms/bestFirstSearch'\r\n\r\nimport './VisualizerComponent.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst START_POS_ROW = 10\r\nconst START_POS_COL = 5\r\nconst FINISH_POS_ROW = 10\r\nconst FINISH_POS_COL = 45\r\n\r\nexport class VisualizerComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             grid : [],\r\n             mousePressed : false\r\n        }\r\n        \r\n        //Refs for all the nodes\r\n        this.nodeRef = []\r\n    }\r\n\r\n      handleMouseDown = (row, col) => {\r\n        if(!this.state.grid[row][col].isWall){\r\n          const newGrid = this.buildWall(row, col)\r\n          this.setState({grid : newGrid, mousePressed : true})\r\n        }else{\r\n          const newGrid = this.removeWall(row, col)\r\n          this.setState({grid : newGrid})\r\n        }\r\n      }\r\n\r\n      handleMouseEnter = (row, col) => {\r\n        if(this.state.mousePressed){\r\n          if(!this.state.grid[row][col].isWall){\r\n            const newGrid = this.buildWall(row, col)\r\n            this.setState({grid : newGrid, mousePressed : true})\r\n          }else{\r\n            const newGrid = this.removeWall(row, col)\r\n            this.setState({grid : newGrid})\r\n          }\r\n        }\r\n      }\r\n    \r\n      handleMouseUp = () => {\r\n        this.setState({mousePressed : false})\r\n      }\r\n\r\n      buildWall = (row, col) => {\r\n        const newGrid = this.state.grid\r\n        const node = newGrid[row][col]\r\n        const newNode = {\r\n          ...node,\r\n          isWall : true\r\n        }\r\n        newGrid[row][col] = newNode\r\n        return newGrid\r\n      }\r\n\r\n      removeWall = (row, col) => {\r\n        const newGrid = this.state.grid\r\n        const node = newGrid[row][col]\r\n        const newNode = {\r\n          ...node,\r\n          isWall : false\r\n        }\r\n        newGrid[row][col] = newNode\r\n        return newGrid\r\n      }\r\n\r\n    componentDidMount() {\r\n        const grid = []\r\n        \r\n        for(let row = 0 ; row < 20 ; row++){\r\n            const columnRow = []\r\n            const rowRef = []\r\n            for(let column = 0 ; column < 50 ; column++){\r\n                columnRow.push(this.createNode(row, column))\r\n                rowRef.push(React.createRef())      \r\n            }\r\n            this.nodeRef.push(rowRef)\r\n            grid.push(columnRow)\r\n        }\r\n        this.setState({grid : grid})\r\n        //console.log(grid)\r\n    }\r\n\r\n    createNode = (row, col) => {\r\n        const newNode = {\r\n        row,\r\n        col,\r\n        isStart : row === START_POS_ROW && col === START_POS_COL,\r\n        isFinish : row ===  FINISH_POS_ROW && col === FINISH_POS_COL,\r\n        distance : Infinity,\r\n        //distanceFromTarget : (Math.abs(row - FINISH_POS_ROW) + Math.abs(col - FINISH_POS_COL)),\r\n        previousNode : null ,\r\n        isVisited : false,\r\n        isWall : false,\r\n        isPath : false\r\n        }\r\n        return newNode\r\n    }\r\n\r\n    clearVisitedNode = (removeWall) => {\r\n      const newGrid = this.state.grid\r\n      for(const row of newGrid){\r\n        for(const node of row){\r\n          const {row, col} = node\r\n          if(node.isStart){\r\n            this.resetStartNode(row, col, newGrid, node)  \r\n          }else if(node.isFinish){\r\n            this.resetFinishNode(row, col, newGrid, node)\r\n          }else if(node.isWall){\r\n            this.resetWallNode(row, col, newGrid, node, removeWall)\r\n          }else{\r\n            this.resetVisitedNode(row, col, newGrid, node)            \r\n          } \r\n        }\r\n      }\r\n      this.setState({grid : newGrid})\r\n      console.log(this.state.grid)\r\n    }\r\n\r\n    resetStartNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        distance : Infinity\r\n      }\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleStart();\r\n    }\r\n\r\n    resetFinishNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        distance : Infinity\r\n      }\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleFinish();\r\n    }\r\n\r\n    resetWallNode = (row, col, grid, node, removeWall) => {\r\n      if(removeWall){\r\n        this.resetVisitedNode(row, col, grid, node)\r\n      }else{\r\n        const newNode = {\r\n          ...node,\r\n          isPath: false,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          isWall : true,\r\n          distance : Infinity\r\n        }\r\n        grid[row][col] = newNode\r\n      }\r\n    }\r\n\r\n    resetVisitedNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        isWall : false,\r\n        distance : Infinity\r\n      }\r\n\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleReset();\r\n    }\r\n\r\n    animateDijkstra = (visitedNodeInOrder, shortestPath) => {\r\n        \r\n        for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n            if(i === visitedNodeInOrder.length - 1){\r\n              setTimeout(() => {\r\n                this.printShortestPath(shortestPath)\r\n              }, 10 * i)\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodeInOrder[i]\r\n                this.nodeRef[node.row][node.col].current.toggleVisited();\r\n            }, 10 * i)\r\n        }\r\n    }\r\n\r\n    printShortestPath = (shortestPath) => {\r\n      for(let i = 0; i < shortestPath.length; i++){\r\n        setTimeout(() => {\r\n          const node = shortestPath[i]\r\n          this.nodeRef[node.row][node.col].current.togglePath();\r\n        }, 30 * i)\r\n      }\r\n    }\r\n\r\n    visualizeDijkstra = () => {\r\n      this.clearVisitedNode(false)\r\n\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        const visitedNodeInOrder = dijkstra(grid.slice(), startNode, finishNode)\r\n        const shortestPath = getShortestPath(finishNode)\r\n        this.animateDijkstra(visitedNodeInOrder, shortestPath)\r\n      }, 500);\r\n        \r\n    }\r\n\r\n    animateDepthFirstSearch = (visitedNodeInOrder, DFSPath) => {\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(DFSPath)\r\n          }, i * 30)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * 30)\r\n      }\r\n    }\r\n\r\n    visualizeDepthFirstSearch = () => {\r\n        this.clearVisitedNode(false)\r\n\r\n        setTimeout(()=>{\r\n          const {grid} = this.state\r\n          //console.log(grid)\r\n          const startNode = grid[START_POS_ROW][START_POS_COL]\r\n          const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n          //console.log(JSON.stringify(startNode)+\" \"+JSON.stringify(finishNode))\r\n          const visitedNodeInOrder = depthFirstSearch(grid.slice(), startNode, finishNode)\r\n          const DFSPath = getDFSPath(finishNode)\r\n          this.animateDepthFirstSearch(visitedNodeInOrder, DFSPath)  \r\n        },500)\r\n\r\n         \r\n    }\r\n\r\n    animateBreadthFirstSearch = (visitedNodeInOrder, DFSPath) => {\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(DFSPath)\r\n          }, i * 30)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * 30)\r\n      }\r\n    }\r\n\r\n\r\n    visualizeBreadthFirstSearch = () => {\r\n      this.clearVisitedNode(false)\r\n\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        console.log(grid)\r\n        const visitedNodeInOrder = breadthFristSearch(grid.slice(), startNode, finishNode)\r\n        //console.log(visitedNodeInOrder)\r\n        const BFSPath = getBFSPath(finishNode)\r\n        this.animateBreadthFirstSearch(visitedNodeInOrder, BFSPath)\r\n      }, 500)\r\n      \r\n    }\r\n\r\n    animateBestFirstSearch = (visitedNodeInOrder, GBFSPath) => {\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(GBFSPath)\r\n          }, i * 30)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * 30)\r\n      }\r\n    }\r\n\r\n    visualizeBestFirstSearch = () => {\r\n      this.clearVisitedNode(false)\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        //console.log(grid)\r\n        const visitedNodeInOrder = bestFirstSearch(grid.slice(), startNode, finishNode)\r\n        //console.log(visitedNodeInOrder)\r\n        const GBFSPath = getGBFSPath(finishNode)\r\n        //console.log(GBFSPath)\r\n        this.animateBestFirstSearch(visitedNodeInOrder, GBFSPath)\r\n      }, 500)\r\n        \r\n    }\r\n\r\n    \r\n    render() {\r\n        const grid = this.state.grid\r\n        //console.log(grid)\r\n        //Building the grid with table and table data as Node component\r\n        return (\r\n          <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">Algorithm Visualizer</a>\r\n            <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Select Algorithm\r\n              </a>\r\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeDijkstra()}>Visualize Dijkstra</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeDepthFirstSearch()}>Visualize Depth Fisrt Search</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeBreadthFirstSearch()}>Visualize Breadth Fisrt Search</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeBestFirstSearch()}>Visualize Best Fisrt Search</a>\r\n              </div>\r\n            </li>\r\n            <li className=\"nav-item\" onClick={() => this.clearVisitedNode(true)}>clear board</li>\r\n            </ul>\r\n            </nav>\r\n            <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeDijkstra()}>Visualize Dijkstra</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeDepthFirstSearch()}>Visualize Depth Fisrt Search</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeBreadthFirstSearch()}>Visualize Breadth Fisrt Search</a>\r\n                <a className=\"dropdown-item\" href=\"#\" onClick={() => this.visualizeBestFirstSearch()}>Visualize Best Fisrt Search</a>\r\n            <div className=\"grid\">\r\n              <table>\r\n                <tbody>\r\n                  {grid.map((row, rowId) => {\r\n                    return (\r\n                      <tr className=\"tr-height\" key={rowId}>\r\n                        {row.map((column, columnId) => (\r\n                          <td key={columnId}>\r\n                            <Node\r\n                              row = {column.row}\r\n                              col = {column.col}\r\n                              isStart={column.isStart}\r\n                              isFinish={column.isFinish}\r\n                              isWall={column.isWall}\r\n                              isPath={column.isPath}\r\n                              isVisited={column.isVisited}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                              onMouseUp={() => this.handleMouseUp()}\r\n                              ref={this.nodeRef[column.row][column.col]}\r\n                            />\r\n                          </td>\r\n                        ))}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualizerComponent\r\n","import React from 'react';\nimport './App.css';\nimport Visualizer from './components/VisualizerComponent'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}