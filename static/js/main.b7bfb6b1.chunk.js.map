{"version":3,"sources":["components/Node/Node.jsx","Algorithms/Helper/minHeap.js","Algorithms/dijkstra.js","Algorithms/depthFirstSearch.js","Algorithms/breadthFirstSearch.js","Algorithms/bestFirstSearch.js","Algorithms/aStarSearch.js","Algorithms/bidirectionalSearch.js","MazeGenerationAlgorithms/RecursiveDivisionMazeGeneration.js","components/VisualizerComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","toggleVisited","ref","current","className","togglePath","toggleReset","toggleStart","toggleFinish","toggleWall","state","extraclassName","React","createRef","this","row","col","isStart","isFinish","isVisited","isWall","isPath","onMouseDown","onMouseEnter","onMouseUp","data-toggle","data-placement","title","id","Component","MinHeap","elements","getLeftChildIndex","parentIndex","getRightChildIndex","getParentIndex","childIndex","Math","floor","hasLeftChild","heapNode","length","hasRightChild","hasParent","getLeftChildData","getRightChildData","getParentData","extractMin","shift","minValue","lastValue","pop","unshift","heapifyDown","getMin","insert","node","push","heapifyUp","index","smallerChildIndex","distance","currentData","smallestChildData","currentIndex","parent","isEmpty","element","dijkstra","grid","startNode","finishNode","visitedNodeOrder","unvisitedNodes","nodes","getAllNodes","sortUnvistedNodesByDistance","closestNode","console","log","Infinity","updateUnvisitedNeighbours","sort","nodeA","nodeB","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","previousNode","hitEdge","getNeighbourNodes","getNeighbours","bestFirstSearch","gridRow","distanceFromTarget","abs","UpdateDistance","visitedNodesInOrder","minHeap","currentNode","updateNeighbours","hurestics","targetNode","huresticFunction","manhattanDistance","max","diagonalDistance","sqrt","pow","euclideanDistance","direction","isVisitedFromOther","wallsToAnimate","recursiveDivsionUtil","startRow","endRow","startCol","endCol","boundaryWalls","recursiveDivsion","possibleRows","i","possibleColumns","randomRowIndex","random","randomColumnIndex","selectedRowPartition","selectedColumnPartition","START_POS_ROW","START_POS_COL","FINISH_POS_ROW","FINISH_POS_COL","SLOW_SPEED","MEDIUM_SPEED","FAST_SPEED","VisualizerComponent","handleMouseClick","newGrid","removeWall","setState","buildWall","handleMouseDown","tempGrid","nodeRef","mousePressed","handleMouseEnter","handleMouseUp","newNode","createNode","hCost","gCost","fCost","nextNode","clearVisitedNode","resetStartNode","resetFinishNode","resetWallNode","resetVisitedNode","animateDijkstra","visitedNodeInOrder","shortestPath","animationSpeed","setTimeout","printShortestPath","mousePointerEvents","visualizeDijkstra","slice","getShortestPath","animateDepthFirstSearch","DFSPath","visualizeDepthFirstSearch","visitedNodes","stack","neighbourNodes","depthFirstSearch","getDFSPath","animateBreadthFirstSearch","visualizeBreadthFirstSearch","queue","breadthFristSearch","BFSPath","getBFSPath","animateBestFirstSearch","GBFSPath","visualizeBestFirstSearch","getGBFSPath","animateAStarSearch","AStarPath","visualizeAStarSearch","openList","closedSet","Set","smallIndex","splice","add","l","has","ng","includes","aStarSearch","aStarPath","getAStarPath","animateBidirectionalSearch","visualizeBidirectionalSearch","queue1","queue2","fromStart","fromFinish","finishNeighbours","startNeighbours","bidirectionalSearch","path","middle1","path1","path2","middle2","concat","getBidirectionalShortestPath","visualizeSelectedAlgorithm","selectedAlgorithm","window","alert","selectAlgorithm","algorithm","selectSpeed","speed","generateWalls","animateWalls","columnRow","rowRef","column","Navbar","bg","Brand","href","NavDropdown","style","pointerEvents","Item","onClick","Nav","Link","map","rowId","key","columnId","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7bfb6b1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Node.css'\r\n\r\nexport class Node extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        extraclassName : ''\r\n      }\r\n\r\n      this.ref = React.createRef()\r\n    }\r\n  \r\n    //Toggle node to visited\r\n    toggleVisited = () => {\r\n      this.ref.current.className = 'node visited-node'\r\n    }\r\n\r\n    togglePath = () => {\r\n      this.ref.current.className = 'node path-node'\r\n    }\r\n\r\n    toggleReset = () => {\r\n      this.ref.current.className = 'node '\r\n    }\r\n\r\n    toggleStart = () => {\r\n      this.ref.current.className = 'node start-node'\r\n    }\r\n\r\n    toggleFinish = () => {\r\n      this.ref.current.className = 'node finish-node'\r\n    }\r\n\r\n    toggleWall = () => {\r\n      this.ref.current.className = 'node wall-node'\r\n    }\r\n    \r\n\r\n    render() {\r\n        const {row, col, isStart, isFinish, isVisited, isWall, isPath, onMouseDown, onMouseEnter, onMouseUp} = this.props\r\n        //If current node is Start or target node then add additions css property to them\r\n        const extraclassName = (isPath)? 'path-node' : (isStart)? 'start-node' : (isFinish)? 'finish-node' : (isWall) ? 'wall-node':(isVisited) ? 'visited-node' : ''\r\n        //console.log(extraclassName)\r\n\r\n        return (\r\n          <div ref={this.ref}\r\n          data-toggle=\"tooltip\" data-placement=\"top\" title={`${row} ${col}`}\r\n            id={`node-${row}-${col}`}\r\n            className={`node ${extraclassName}`}\r\n            \r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node\r\n","export class MinHeap {\r\n    \r\n        constructor(elements) {\r\n           this.heapNode = [];\r\n           //console.log(this.heapNode)\r\n           for(let element of elements){\r\n               \r\n               this.insert(element)\r\n           }\r\n         }\r\n\r\n         getLeftChildIndex = parentIndex => {\r\n           return parentIndex * 2 + 1;\r\n         };\r\n\r\n         getRightChildIndex = parentIndex => {\r\n           return parentIndex * 2 + 2;\r\n         };\r\n\r\n         getParentIndex = childIndex => {\r\n           return Math.floor((childIndex - 1) / 2);\r\n         };\r\n\r\n         hasLeftChild = parentIndex => {\r\n           return this.getLeftChildIndex(parentIndex) < this.heapNode.length;\r\n         };\r\n\r\n         hasRightChild = parentIndex => {\r\n           return this.getRightChildIndex(parentIndex) < this.heapNode.length;\r\n         };\r\n\r\n         hasParent = childIndex => {\r\n           return this.getParentIndex(childIndex) >= 0;\r\n         };\r\n\r\n         getLeftChildData = parentIndex => {\r\n           return this.heapNode[this.getLeftChildIndex(parentIndex)];\r\n         };\r\n\r\n         getRightChildData = parentIndex => {\r\n           return this.heapNode[this.getRightChildIndex(parentIndex)];\r\n         };\r\n\r\n         getParentData = childIndex => {\r\n           return this.heapNode[this.getParentIndex(childIndex)];\r\n         };\r\n\r\n         extractMin = () => {\r\n            \r\n           if(this.heapNode.length === 1){\r\n               return this.heapNode.shift();\r\n           }\r\n           if (this.heapNode.length !== 0) {\r\n             const minValue = this.heapNode.shift();\r\n             const lastValue = this.heapNode.pop();\r\n             this.heapNode.unshift(lastValue);\r\n             this.heapifyDown();\r\n             return minValue;\r\n           }\r\n         };\r\n\r\n         getMin = () => {\r\n           if (this.heapNode.length !== 0) {\r\n             return this.heapNode[0];\r\n           }\r\n         };\r\n\r\n         insert = node => {\r\n           this.heapNode.push(node);\r\n           this.heapifyUp();\r\n         };\r\n\r\n         heapifyDown = () => {\r\n           let index = 0\r\n           while(this.hasLeftChild(index)){\r\n               let smallerChildIndex = this.getLeftChildIndex(index)\r\n               if(this.hasRightChild(index) && this.getLeftChildData(index).distance > this.getRightChildData(index).distance){\r\n                   smallerChildIndex = this.getRightChildIndex(index)\r\n               }\r\n\r\n               let currentData = (this.heapNode[index])\r\n               let smallestChildData = (this.heapNode[smallerChildIndex])\r\n\r\n               if(currentData.distance < smallestChildData.distance){\r\n                    break;\r\n               }else{\r\n                    this.heapNode[smallerChildIndex] = currentData\r\n                    this.heapNode[index] = smallestChildData\r\n               }\r\n               index = smallerChildIndex\r\n           }\r\n         };\r\n\r\n         heapifyUp = () => {\r\n           let currentIndex = this.heapNode.length - 1;\r\n           while (this.hasParent(currentIndex)) {\r\n             let parentIndex = this.getParentIndex(currentIndex);\r\n             let parent = (this.heapNode[parentIndex]);\r\n             let current = (this.heapNode[currentIndex]);\r\n             if (current.distance < parent.distance) {\r\n               this.heapNode[parentIndex] = current;\r\n               this.heapNode[currentIndex] = parent;\r\n               currentIndex = parentIndex;\r\n             } else {\r\n               break;\r\n             }\r\n           }\r\n         };\r\n\r\n         isEmpty = () => {\r\n            return this.heapNode.length === 0\r\n         }\r\n}\r\n","import {MinHeap} from './Helper/minHeap'\r\nconst heap = new MinHeap([])\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    \r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodeOrder = []\r\n    startNode.distance = 0\r\n    \r\n\r\n    /*heap.insert(startNode)\r\n    \r\n    while (!heap.isEmpty()) {\r\n        const closestNode = heap.extractMin()\r\n        if(closestNode.isVisited) continue\r\n        closestNode.isVisited = true;\r\n        //If the node is wall then ignore it\r\n        if(closestNode.isWall) continue\r\n        //If the start node is fully surrounded by wall\r\n        if(closestNode.distance === Infinity) return visitedNodeOrder\r\n        //If the node is visited then add it to the visited list\r\n        visitedNodeOrder.push(closestNode)\r\n        //If target node is found\r\n        if(closestNode === finishNode){\r\n            return visitedNodeOrder\r\n        }\r\n        //Update the distance and parent of the neighbouring nodes\r\n        updateUnvisitedNeighbours(closestNode, grid)\r\n    }*/\r\n    const unvisitedNodes = getAllNodes(grid)\r\n    while (unvisitedNodes.length !== 0) {\r\n        sortUnvistedNodesByDistance(unvisitedNodes)\r\n        const closestNode = unvisitedNodes.shift()\r\n        \r\n        //const closestNode = heap.extractMin()\r\n        console.log(closestNode)\r\n        \r\n        //If the start node is fully surrounded by wall\r\n        if(closestNode.distance === Infinity) return visitedNodeOrder\r\n\r\n        if(closestNode.isVisited) continue\r\n\r\n        closestNode.isVisited = true;\r\n        //If the node is wall then ignore it\r\n        if(closestNode.isWall) continue\r\n        \r\n        //If the node is visited then add it to the visited list\r\n        visitedNodeOrder.push(closestNode)\r\n        //If target node is found\r\n        if(closestNode === finishNode){\r\n            //heap.insert(visitedNodeOrder)\r\n            //console.log('min '+JSON.stringify(heap.extractMin()))\r\n            return visitedNodeOrder\r\n        }\r\n        //Update the distance and parent of the neighbouring nodes\r\n        updateUnvisitedNeighbours(closestNode, grid)\r\n    }\r\n}\r\n\r\nfunction sortUnvistedNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid){\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(node, grid)\r\n    for(const neighbour of unvisitedNeighbours){\r\n        neighbour.distance = node.distance + 1\r\n        neighbour.previousNode = node\r\n        \r\n       // heap.insert(neighbour)\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid){\r\n    const  neighbours = []\r\n    const {row, col} = node\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n\r\n    return neighbours.filter((neighbour) => (neighbour.isVisited === false))\r\n    /*console.log(neighbours.map((node) => console.log('['+node.row+\" \"+node.col+']'+' '+node.isVisited))+'neighbors of '+ node.row +\" \"+ node.col +\"= \")\r\n    return neighbours*/\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = []\r\n    for(let row of grid){\r\n        for(let node of row){\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n\r\nexport function getShortestPath(finishNode){\r\n    const shortestPath = []\r\n     \r\n    //if there is no path\r\n     if(finishNode.previousNode === null)\r\n        return shortestPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode != null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        shortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return shortestPath\r\n}","var hitEdge = false\r\nexport function depthFirstSearch(grid, startNode, finishNode){\r\n    \r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodes = []\r\n    const stack = [startNode]\r\n    while(stack.length !== 0){\r\n        const currentNode = stack.pop()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodes.push(currentNode)\r\n        if(currentNode === finishNode)\r\n            return visitedNodes\r\n        const neighbourNodes = getNeighbourNodes(grid, currentNode)\r\n        for(const neighbour of neighbourNodes){\r\n            neighbour.previousNode = currentNode\r\n            stack.push(neighbour)\r\n        }\r\n    }\r\n\r\n    //If target not found\r\n    return visitedNodes\r\n}\r\n\r\nfunction getNeighbourNodes(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n    \r\n    if(hitEdge){\r\n        if(row > 0) neighbours.push(grid[row - 1][col])\r\n        if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n        if(col > 0) neighbours.push(grid[row][col - 1])\r\n        if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n        else{\r\n            hitEdge = false\r\n        }\r\n    }else{\r\n        if(col > 0) neighbours.push(grid[row][col - 1])\r\n        if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n        if(row > 0) neighbours.push(grid[row - 1][col])\r\n        if(row < grid.length - 1) \r\n            neighbours.push(grid[row + 1][col])\r\n        else\r\n            hitEdge = true\r\n    }\r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nexport function getDFSPath(finishNode){\r\n    const DFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return DFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        DFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return DFSPath\r\n}\r\n","\r\nexport function breadthFristSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodes = []\r\n    const queue = [startNode]\r\n    while(queue.length !== 0){\r\n        const currentNode = queue.shift()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodes.push(currentNode)\r\n        if(currentNode === finishNode) return visitedNodes\r\n        const neighbours = getNeighbours(grid, currentNode)\r\n        for(const neighbour of neighbours){\r\n            neighbour.previousNode = currentNode\r\n            queue.push(neighbour)\r\n        }\r\n    }\r\n\r\n    //If target not found\r\n    return visitedNodes\r\n}\r\n\r\nfunction getNeighbours(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n\r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nexport function getBFSPath(finishNode){\r\n    const BFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return BFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        BFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return BFSPath\r\n}\r\n","import {MinHeap} from './Helper/minHeap'\r\n\r\nexport function bestFirstSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n    \r\n    UpdateDistance(grid, finishNode)\r\n    //finishNode = grid[finishNode.row][finishNode.col]\r\n    //console.log(grid)\r\n\r\n    const visitedNodesInOrder = []\r\n    //startNode.distance = 0\r\n    const minHeap = new MinHeap([])\r\n    minHeap.insert(startNode)\r\n    while(!minHeap.isEmpty()){\r\n        const currentNode = minHeap.extractMin()\r\n        if(currentNode.isWall) continue\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodesInOrder.push(currentNode)\r\n        if(currentNode === finishNode)\r\n            return visitedNodesInOrder\r\n        updateNeighbours(grid, currentNode, minHeap)\r\n    }\r\n    /*const priorityQueue = [startNode]\r\n    while(priorityQueue.length !== 0){\r\n        sortUnvistedNodesByDistance(priorityQueue)\r\n        const currentNode = priorityQueue.shift()\r\n        console.log(priorityQueue.length)\r\n        if(currentNode.isVisited) continue\r\n        currentNode.isVisited = true\r\n        visitedNodesInOrder.push(currentNode)\r\n        if(currentNode.row === finishNode.row && currentNode.col === finishNode.col){\r\n            console.log(currentNode)\r\n            console.log(finishNode)\r\n            return visitedNodesInOrder\r\n        }\r\n\r\n        const neighbours = getUnvisitedNeighbours(grid, currentNode)\r\n        for(const neighbour of neighbours){\r\n            neighbour.previousNode = currentNode\r\n            priorityQueue.push(neighbour)\r\n        }\r\n    }*/\r\n    return visitedNodesInOrder\r\n}\r\n\r\nfunction sortUnvistedNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(grid, node, minHeap){\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(grid, node)\r\n    for(let neighbour of unvisitedNeighbours){\r\n        //neighbour.distance = node.distance + 1\r\n        neighbour.previousNode = node\r\n        minHeap.insert(neighbour)\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n   \r\n    return neighbours.filter(neighbour => !neighbour.isVisited)\r\n}\r\n\r\nfunction UpdateDistance (grid, finishNode){\r\n    const {row, col} = finishNode\r\n    for(let gridRow of grid){\r\n        for(let node of gridRow){\r\n            const distanceFromTarget = Math.abs(node.row - row) + Math.abs(node.col - col)\r\n            /*const newNode = {\r\n                ...node,\r\n                distance : distanceFromTarget\r\n            }*/\r\n            grid[node.row][node.col].distance = distanceFromTarget\r\n        }\r\n    }\r\n    return grid\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = []\r\n    for(let row of grid){\r\n        for(let node of row){\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n\r\nexport function getGBFSPath(finishNode){\r\n    const GBFSPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return GBFSPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        GBFSPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return GBFSPath\r\n}\r\n","import {MinHeap} from './Helper/minHeap'\r\nimport Heap from 'heap'\r\n\r\n/*export function aStarSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    let openList = new Heap(function(nodeA, nodeB) {\r\n        return nodeA.fCost - nodeB.fCost;\r\n    })\r\n\r\n    const visitedNodes = []\r\n    \r\n    //const openSet = new Set()\r\n    const closedSet = new Set()\r\n\r\n    startNode.fCost = 0\r\n    startNode.gCost = 0\r\n    startNode.hCost = manhattanDistance(startNode, finishNode)\r\n\r\n    openList.push(startNode)\r\n    //openSet.add(startNode)\r\n\r\n    while(!openList.empty()){\r\n\r\n        \r\n        openList.heapify();\r\n        //console.log(openList);\r\n        const currentNode = openList.pop()\r\n        console.log(currentNode.fCost);\r\n        console.log(currentNode)\r\n        //openSet.delete(currentNode)\r\n        closedSet.add(currentNode)\r\n\r\n        visitedNodes.push(currentNode)\r\n\r\n        if(currentNode === finishNode){\r\n            return visitedNodes\r\n        }\r\n\r\n        const neighbours = getNeighbours(grid, currentNode)\r\n        for(let i = 0, l = neighbours.length; i < l ; ++i){\r\n            const neighbour = neighbours[i]\r\n            \r\n            if(closedSet.has(neighbour))\r\n                continue\r\n            \r\n            let ng = currentNode.gCost + 1;\r\n\r\n            if(openList.has(neighbour)){\r\n\r\n                if(ng < neighbour.gCost){\r\n                    neighbour.gCost = ng\r\n                    neighbour.hCost = hurestics(neighbour, finishNode, 'manhattan_distance')\r\n                    neighbour.fCost = neighbour.gCost + neighbour.hCost\r\n                    neighbour.previousNode = currentNode   \r\n                    openList.updateItem(neighbour) \r\n                }\r\n\r\n                if(/*!openSet.has(neighbour)!openList.has(neighbour)){\r\n                    //openList.push(neighbour)\r\n                    //openSet.add(neighbour)\r\n                }else{\r\n                    //openList.updateItem(neighbour)\r\n                }\r\n            }else{\r\n                    neighbour.gCost = ng\r\n                    neighbour.hCost = hurestics(neighbour, finishNode, 'manhattan_distance')\r\n                    neighbour.fCost = neighbour.gCost + neighbour.hCost\r\n                    neighbour.previousNode = currentNode   \r\n                    openList.push(neighbour) \r\n            }\r\n\r\n        }  \r\n    }\r\n\r\n}*/\r\n\r\nexport function aStarSearch(grid, startNode, finishNode){\r\n\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    let openList = []\r\n\r\n    const visitedNodes = []\r\n    \r\n    //const openSet = new Set()\r\n    const closedSet = new Set()\r\n\r\n    startNode.fCost = 0\r\n    startNode.gCost = 0\r\n    startNode.hCost = manhattanDistance(startNode, finishNode)\r\n\r\n    openList.push(startNode)\r\n    //openSet.add(startNode)\r\n\r\n    while(openList.length !== 0){\r\n\r\n        \r\n        //openList.heapify();\r\n        //console.log(openList);\r\n        let smallIndex = 0;\r\n\r\n        for(let i=0; i<openList.length; i++){\r\n            if( openList[i].fCost < openList[smallIndex].fCost){\r\n                smallIndex = i;\r\n            }\r\n        }\r\n        console.log(smallIndex);\r\n        let currentNode = openList.splice(smallIndex, 1)[0];\r\n        console.log(currentNode)\r\n        closedSet.add(currentNode)\r\n\r\n        visitedNodes.push(currentNode)\r\n\r\n        if(currentNode === finishNode){\r\n            return visitedNodes\r\n        }\r\n\r\n        const neighbours = getNeighbours(grid, currentNode)\r\n        //console.log(neighbours)\r\n        for(let i = 0, l = neighbours.length; i < l ; ++i){\r\n            const neighbour = neighbours[i]\r\n            \r\n            //console.log(\"Parent = \"+ currentNode.row+\" \"+currentNode.col)\r\n\r\n            if(closedSet.has(neighbour))\r\n                continue\r\n            \r\n            let ng = currentNode.gCost + 1;\r\n\r\n            if(openList.includes(neighbour)){\r\n                console.log(\"before \"+neighbour.gCost+\" new \"+ng)\r\n                if(ng < neighbour.gCost){\r\n                    neighbour.gCost = ng\r\n                    neighbour.hCost = hurestics(neighbour, finishNode, 'manhattan_distance')\r\n                    neighbour.fCost = neighbour.gCost + neighbour.hCost\r\n                    neighbour.previousNode = currentNode   \r\n                    //openList.push(neighbour) \r\n                    console.log(\"after \"+neighbour.gCost)\r\n                }\r\n\r\n            }else{\r\n                    neighbour.gCost = ng\r\n                    neighbour.hCost = hurestics(neighbour, finishNode, 'manhattan_distance')\r\n                    neighbour.fCost = neighbour.gCost + neighbour.hCost\r\n                    neighbour.previousNode = currentNode   \r\n                    openList.push(neighbour) \r\n            }\r\n\r\n        }  \r\n    }\r\n\r\n}\r\n\r\nfunction getDistance(node, target){\r\n    return manhattanDistance(node, target)\r\n}\r\n\r\nfunction hurestics(node, targetNode, huresticFunction){\r\n    if(huresticFunction === 'manhattan_distance'){\r\n        return manhattanDistance(node, targetNode)\r\n    }else if(huresticFunction === 'diagonal_distance'){\r\n        return diagonalDistance(node, targetNode)\r\n    }else{\r\n        return euclideanDistance(node, targetNode)\r\n    }\r\n}\r\n\r\nfunction manhattanDistance(node, targetNode){\r\n    return Math.abs(node.row - targetNode.row) + Math.abs(node.col - targetNode.col)\r\n}\r\n\r\nfunction diagonalDistance(node, targetNode){\r\n    return Math.max(Math.abs(node.row - targetNode.row), Math.abs(node.col - targetNode.col))\r\n}\r\n\r\nfunction euclideanDistance(node, targetNode){\r\n    return Math.sqrt(Math.pow((node.row - targetNode.row), 2) + Math.pow((node.col - targetNode.col), 2))\r\n}\r\n\r\n\r\nfunction getNeighbours(grid, node){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n    \r\n    //console.log(neighbours)\r\n    return neighbours.filter(neighbour => !neighbour.isWall)\r\n}\r\n\r\nexport function getAStarPath(finishNode){\r\n    const aStarPath = []\r\n    \r\n    //if there is no path\r\n    if(finishNode.previousNode === null)\r\n        return aStarPath\r\n\r\n    var currentNode = finishNode\r\n    while(currentNode !== null){\r\n        currentNode = { ...currentNode, isPath : true}\r\n        aStarPath.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return aStarPath\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = []\r\n    for(let row of grid){\r\n        for(let node of row){\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}","export function bidirectionalSearch(grid, startNode, finishNode) {\r\n    if(!startNode || !finishNode || startNode === finishNode)\r\n        return false\r\n\r\n    const visitedNodes = []\r\n    const queue1 = [startNode]\r\n    const queue2 = [finishNode]\r\n    while(queue1.length !== 0 && queue2.length !== 0){\r\n        const fromStart = queue1.shift()\r\n        const fromFinish = queue2.shift()\r\n        if(fromFinish.isVisited){\r\n            console.log(fromFinish)\r\n            visitedNodes.push(fromFinish)\r\n            return visitedNodes\r\n        }\r\n        if(fromStart.isVisitedFromOther){\r\n            console.log(fromStart)\r\n            visitedNodes.push(fromStart)\r\n            return visitedNodes\r\n        }\r\n        if(fromStart === fromFinish){\r\n            return visitedNodes\r\n        }\r\n\r\n        if(fromStart.isVisited && fromFinish.isVisitedFromOther) \r\n            continue\r\n        else if(fromStart.isVisited){\r\n            fromFinish.isVisitedFromOther = true;\r\n            visitedNodes.push(fromFinish)\r\n            const finishNeighbours = getNeighbours(grid, fromFinish, 'from_finish')\r\n            for(const neighbour of finishNeighbours){\r\n                neighbour.nextNode = fromFinish\r\n                queue2.push(neighbour)\r\n            }\r\n        }else if(fromFinish.isVisitedFromOther){\r\n            fromStart.isVisited = true\r\n            visitedNodes.push(fromStart)\r\n            const startNeighbours = getNeighbours(grid, fromStart, 'from_start')\r\n            for(const neighbour of startNeighbours){\r\n                neighbour.previousNode = fromStart\r\n                queue1.push(neighbour)\r\n            }\r\n        } else{\r\n            fromFinish.isVisitedFromOther = true\r\n            visitedNodes.push(fromFinish)\r\n            const finishNeighbours = getNeighbours(grid, fromFinish, 'from_finish')\r\n            for(const neighbour of finishNeighbours){\r\n                neighbour.nextNode = fromFinish\r\n                queue2.push(neighbour)\r\n            }\r\n            fromStart.isVisited = true\r\n            visitedNodes.push(fromStart)\r\n            const startNeighbours = getNeighbours(grid, fromStart, 'from_start')\r\n            for(const neighbour of startNeighbours){\r\n                neighbour.previousNode = fromStart\r\n                queue1.push(neighbour)\r\n            }\r\n        }\r\n\r\n    }\r\n    return visitedNodes\r\n}\r\n\r\nfunction getNeighbours(grid, node, direction){\r\n    const neighbours = []\r\n    const {row, col} = node\r\n    if(row > 0) neighbours.push(grid[row - 1][col])\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col])\r\n    if(col > 0) neighbours.push(grid[row][col - 1])\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col + 1])\r\n\r\n    if(direction === 'from_start')\r\n        return neighbours.filter(neighbour => !neighbour.isVisited && !neighbour.isWall)\r\n    return neighbours.filter(neighbour => !neighbour.isVisitedFromOther && !neighbour.isWall)\r\n}\r\nexport function getBidirectionalShortestPath(middle1 , finishNode){\r\n    const pathList = []\r\n    const path1 = []\r\n    const path2 = []\r\n    let middle2 = middle1.nextNode\r\n    while(middle1 !== null){\r\n        middle1.isPath = true\r\n        path1.unshift(middle1)\r\n        middle1 = middle1.previousNode\r\n    }\r\n\r\n    while(middle2 !== null){\r\n        middle2.isPath = true\r\n        path2.push(middle2)\r\n        middle2 = middle2.nextNode\r\n    }\r\n\r\n    return path1.concat(path2)\r\n}","var wallsToAnimate = []\r\nexport function recursiveDivsionUtil(grid, startRow, endRow, startCol, endCol, direction, boundaryWalls){\r\n    \r\n    recursiveDivsion(grid, startRow, endRow, startCol, endCol, direction, boundaryWalls);\r\n    console.log(wallsToAnimate);\r\n    console.log(grid)\r\n    return wallsToAnimate;\r\n}\r\n\r\nfunction recursiveDivsion(grid, startRow, endRow, startCol, endCol, direction, boundaryWalls){\r\n    if(startRow > endRow || startCol > endCol){\r\n        return;\r\n    }\r\n\r\n    if(boundaryWalls){\r\n\r\n        for(let row = 0; row < grid.length; row++){\r\n            for(let col = 0; col < grid[0].length; col++){\r\n                if(row === 0 || col === 0 || row === grid.length - 1 || col === grid[0].length - 1){\r\n                    const node = grid[row][col];\r\n                    if(node.isStart || node.isFinish){\r\n                        continue;\r\n                    }\r\n                    node.isWall = true;\r\n                    wallsToAnimate.push(node);\r\n                }\r\n            }\r\n        }\r\n        boundaryWalls = false;\r\n    }\r\n\r\n    if(direction===\"horizontal\"){\r\n\r\n        let possibleRows = []\r\n        for(let i = startRow; i <= endRow; i += 2){\r\n            possibleRows.push(i);\r\n        }\r\n\r\n        let possibleColumns = []\r\n        for(let i = startCol - 1; i <= endCol + 1; i += 2){\r\n            possibleColumns.push(i);\r\n        }\r\n\r\n        let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\r\n        let randomColumnIndex = Math.floor(Math.random() * possibleColumns.length);\r\n\r\n        let selectedRowPartition = possibleRows[randomRowIndex];\r\n        let selectedColumnPartition = possibleColumns[randomColumnIndex];\r\n\r\n        for(let row = 0; row < grid.length; row++){\r\n            for(let col = 0; col < grid[0].length; col++){\r\n                if(row === selectedRowPartition && col !== selectedColumnPartition && col >= startCol - 1 && col <= endCol + 1){\r\n                    const node = grid[row][col];\r\n                    if(node.isStart || node.isFinish){\r\n                        continue;\r\n                    }\r\n                    node.isWall = true;\r\n                    wallsToAnimate.push(node);\r\n                }\r\n            } \r\n        }\r\n\r\n        if(selectedRowPartition - 2 - startRow > endCol - startCol){\r\n            recursiveDivsion(grid, startRow, selectedRowPartition - 2, startCol , endCol, direction, boundaryWalls);\r\n        } else {\r\n            recursiveDivsion(grid, startRow, selectedRowPartition - 2, startCol , endCol, \"vertical\", boundaryWalls);\r\n        }\r\n\r\n        if(endRow -(selectedRowPartition + 2) > endCol - startCol){\r\n            recursiveDivsion(grid, selectedRowPartition + 2, endRow, startCol , endCol, direction, boundaryWalls);\r\n        }else{\r\n            recursiveDivsion(grid, selectedRowPartition + 2, endRow, startCol , endCol, \"vertical\", boundaryWalls);\r\n        }\r\n\r\n    }else{\r\n\r\n        let possibleColumns = []\r\n        for(let i = startCol; i <= endCol; i += 2){\r\n            possibleColumns.push(i);\r\n        }\r\n\r\n        let possibleRows = []\r\n        for(let i = startRow - 1; i <= endRow + 1; i += 2){\r\n            possibleRows.push(i);\r\n        }\r\n\r\n        let randomColumnIndex = Math.floor(Math.random() * possibleColumns.length);\r\n        let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\r\n\r\n        let selectedColumnPartition = possibleColumns[randomColumnIndex];\r\n        let selectedRowPartition = possibleRows[randomRowIndex];\r\n\r\n        for(let row = 0; row < grid.length; row++){\r\n            for(let col = 0; col < grid[0].length; col++){\r\n                if(col === selectedColumnPartition && row !== selectedRowPartition && row >= startRow - 1 && row <= endRow + 1){\r\n                    const node = grid[row][col];\r\n                    if(node.isStart || node.isFinish){\r\n                        continue;\r\n                    }\r\n                    node.isWall = true;\r\n                    wallsToAnimate.push(node);\r\n                }\r\n            } \r\n        }\r\n\r\n        if(endRow - startRow > selectedColumnPartition - 2- startCol){\r\n            recursiveDivsion(grid, startRow, endRow, startCol , selectedColumnPartition - 2, \"horizontal\", boundaryWalls);\r\n        }else{\r\n            recursiveDivsion(grid, startRow, endRow, startCol , selectedColumnPartition - 2, direction, boundaryWalls);\r\n        }\r\n\r\n        if(endRow - startRow > endCol - (selectedColumnPartition + 2)){\r\n            recursiveDivsion(grid, startRow, endRow, selectedColumnPartition + 2, endCol, \"horizontal\", boundaryWalls);\r\n        }else{\r\n            recursiveDivsion(grid, startRow, endRow, selectedColumnPartition + 2, endCol, direction, boundaryWalls);       \r\n        }\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\nimport {dijkstra, getShortestPath} from '../Algorithms/dijkstra'\r\nimport {depthFirstSearch, getDFSPath} from '../Algorithms/depthFirstSearch'\r\nimport {breadthFristSearch, getBFSPath} from '../Algorithms/breadthFirstSearch'\r\nimport {bestFirstSearch, getGBFSPath} from '../Algorithms/bestFirstSearch'\r\nimport { aStarSearch, getAStarPath } from \"../Algorithms/aStarSearch\"\r\nimport { bidirectionalSearch, getBidirectionalShortestPath } from \"../Algorithms/bidirectionalSearch\";\r\nimport { recursiveDivsionUtil} from \"../MazeGenerationAlgorithms/RecursiveDivisionMazeGeneration\"\r\n\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\n\r\nimport './VisualizerComponent.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst START_POS_ROW = 10\r\nconst START_POS_COL = 7\r\nconst FINISH_POS_ROW = 11\r\nconst FINISH_POS_COL = 45 \r\nconst SLOW_SPEED = 60\r\nconst MEDIUM_SPEED = 30\r\nconst FAST_SPEED = 15\r\n\r\nexport class VisualizerComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             grid : [],\r\n             mousePressed : false,\r\n             mousePointerEvents : 'auto',\r\n             selectedAlgorithm : '', \r\n             speed : 'medium',\r\n             animationSpeed : 30\r\n        }\r\n        \r\n        //Refs for all the nodes\r\n        this.nodeRef = []\r\n    }\r\n\r\n      handleMouseClick = (row, col) => {\r\n        if(!this.state.grid[row][col].isWall){\r\n          const newGrid = this.buildWall(row, col)\r\n          this.setState({grid : newGrid})\r\n        }else{\r\n          const newGrid = this.removeWall(row, col)\r\n          this.setState({grid : newGrid})\r\n        }\r\n      }\r\n\r\n      handleMouseDown = (row, col) => {\r\n        console.log('mouse down')\r\n        //if(this.state.algorithmRunning) return\r\n        if(this.state.grid[row][col].isStart || this.state.grid[row][col].isFinish)\r\n          return \r\n        if(!this.state.grid[row][col].isWall){\r\n          const newGrid = this.buildWall(row, col)\r\n          this.tempGrid = newGrid\r\n          this.mousePressed = true\r\n          this.nodeRef[row][col].current.toggleWall()\r\n          //this.setState({/*grid : newGrid,*/ mousePressed : true})\r\n        }else{\r\n          const newGrid = this.removeWall(row, col)\r\n          this.tempGrid = newGrid\r\n          this.nodeRef[row][col].current.toggleReset()\r\n          //this.setState({grid : newGrid})\r\n        }\r\n      }\r\n\r\n      handleMouseEnter = (row, col) => {\r\n        console.log('mouse enter')\r\n        //if(this.state.algorithmRunning) return\r\n        if(this.state.grid[row][col].isStart || this.state.grid[row][col].isFinish)\r\n          return \r\n        if(this.mousePressed){\r\n          if(!this.state.grid[row][col].isWall){\r\n            const newGrid = this.buildWall(row, col)\r\n            this.tempGrid = newGrid\r\n            this.nodeRef[row][col].current.toggleWall()\r\n            //this.setState({grid : newGrid})\r\n          }else{\r\n            /*const newGrid = this.removeWall(row, col)\r\n            this.tempGrid = newGrid\r\n            this.nodeRef[row][col].current.toggleReset()*/\r\n            //this.setState({grid : newGrid})\r\n          }\r\n        }\r\n      }\r\n    \r\n      handleMouseUp = () => {\r\n        console.log('mouse up')\r\n        this.mousePressed = false\r\n        this.setState({grid : this.tempGrid/*, mousePressed : false*/})\r\n      }\r\n\r\n      buildWall = (row, col) => {\r\n        const newGrid = this.state.grid\r\n        const node = newGrid[row][col]\r\n        const newNode = {\r\n          ...node,\r\n          isWall : true\r\n        }\r\n        newGrid[row][col] = newNode\r\n        return newGrid\r\n      }\r\n\r\n      removeWall = (row, col) => {\r\n        const newGrid = this.state.grid\r\n        const node = newGrid[row][col]\r\n        const newNode = {\r\n          ...node,\r\n          isWall : false\r\n        }\r\n        newGrid[row][col] = newNode\r\n        return newGrid\r\n      }\r\n\r\n    componentDidMount() {\r\n        const grid = []\r\n        \r\n        for(let row = 0 ; row < 21 ; row++){\r\n            const columnRow = []\r\n            const rowRef = []\r\n            for(let column = 0 ; column < 50 ; column++){\r\n                columnRow.push(this.createNode(row, column))\r\n                rowRef.push(React.createRef())      \r\n            }\r\n            this.nodeRef.push(rowRef)\r\n            grid.push(columnRow)\r\n        }\r\n        this.setState({grid : grid})\r\n        //console.log(grid)\r\n    }\r\n\r\n    createNode = (row, col) => {\r\n        const newNode = {\r\n        row,\r\n        col,\r\n        isStart : row === START_POS_ROW && col === START_POS_COL,\r\n        isFinish : row ===  FINISH_POS_ROW && col === FINISH_POS_COL,\r\n        distance : Infinity,\r\n        hCost : null,\r\n        gCost : null,\r\n        fCost : null,\r\n        previousNode : null ,\r\n        nextNode : null,\r\n        isVisited : false,\r\n        isVisitedFromOther : false,\r\n        isWall : false,\r\n        isPath : false\r\n        }\r\n        return newNode\r\n    }\r\n\r\n    clearVisitedNode = (removeWall) => {\r\n      const newGrid = this.state.grid\r\n      for(const row of newGrid){\r\n        for(const node of row){\r\n          const {row, col} = node\r\n          if(node.isStart){\r\n            this.resetStartNode(row, col, newGrid, node)  \r\n          }else if(node.isFinish){\r\n            this.resetFinishNode(row, col, newGrid, node)\r\n          }else if(node.isWall){\r\n            this.resetWallNode(row, col, newGrid, node, removeWall)\r\n          }else{\r\n            this.resetVisitedNode(row, col, newGrid, node)            \r\n          } \r\n        }\r\n      }\r\n      this.setState({grid : newGrid})\r\n      //console.log(this.state.grid)\r\n    }\r\n\r\n    resetStartNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        isVisitedFromOther : false,\r\n        previousNode: null,\r\n        nextNode : null,\r\n        distance : Infinity,\r\n        hCost : null,\r\n        gCost : null,\r\n        fCost : null,\r\n      }\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleStart();\r\n    }\r\n\r\n    resetFinishNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        isVisitedFromOther : false,\r\n        previousNode: null,\r\n        nextNode : null,\r\n        distance : Infinity,\r\n        hCost : null,\r\n        gCost : null,\r\n        fCost : null,\r\n      }\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleFinish();\r\n    }\r\n\r\n    resetWallNode = (row, col, grid, node, removeWall) => {\r\n      if(removeWall){\r\n        this.resetVisitedNode(row, col, grid, node)\r\n      }else{\r\n        const newNode = {\r\n          ...node,\r\n          isPath: false,\r\n          isVisited: false,\r\n          isVisitedFromOther : false,\r\n          previousNode: null,\r\n          nextNode : null,\r\n          isWall : true,\r\n          distance : Infinity,\r\n          hCost : null,\r\n        gCost : null,\r\n        fCost : null,\r\n        }\r\n        grid[row][col] = newNode\r\n      }\r\n    }\r\n\r\n    resetVisitedNode = (row, col, grid, node) => {\r\n      const newNode = {\r\n        ...node,\r\n        isPath: false,\r\n        isVisited: false,\r\n        isVisitedFromOther : false,\r\n        previousNode: null,\r\n        nextNode : null,\r\n        isWall : false,\r\n        distance : Infinity,\r\n        hCost : null,\r\n        gCost : null,\r\n        fCost : null,\r\n      }\r\n\r\n      grid[row][col] = newNode\r\n      this.nodeRef[node.row][node.col].current.toggleReset();\r\n    }\r\n\r\n    animateDijkstra = (visitedNodeInOrder, shortestPath) => {\r\n        const grid = this.state.grid\r\n        const {animationSpeed} = this.state\r\n        for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n            grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n            if(i === visitedNodeInOrder.length - 1){\r\n              setTimeout(() => {\r\n                this.printShortestPath(shortestPath, grid)\r\n              }, animationSpeed * i)\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodeInOrder[i]\r\n                this.nodeRef[node.row][node.col].current.toggleVisited();\r\n            }, animationSpeed * i)\r\n        }\r\n    }\r\n\r\n    printShortestPath = (shortestPath, grid) => {\r\n      const {animationSpeed} = this.state\r\n      if(shortestPath.length === 0){\r\n        setTimeout(() => {\r\n          this.setState({mousePointerEvents : 'auto'})\r\n        }, animationSpeed)\r\n        return\r\n      }\r\n      for(let i = 0; i < shortestPath.length; i++){\r\n        setTimeout(() => {\r\n          const node = shortestPath[i]\r\n          //console.log(grid[node.row][node.col])\r\n          grid[node.row][node.col] = node\r\n          this.nodeRef[node.row][node.col].current.togglePath();\r\n          if(i === shortestPath.length - 1){\r\n            this.setState({grid : grid})\r\n            setTimeout(() => {\r\n              this.setState({mousePointerEvents : 'auto'})\r\n            }, animationSpeed * i+1);\r\n          }\r\n        }, animationSpeed * i)\r\n      }\r\n      //console.log(this.state.algorithmRunning)\r\n    }\r\n\r\n    visualizeDijkstra = () => {\r\n      //console.log(this.state.algorithmRunning)\r\n      this.setState({mousePointerEvents : 'none'})\r\n      //console.log(this.state.algorithmRunning)\r\n      this.clearVisitedNode(false)\r\n\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        const visitedNodeInOrder = dijkstra(grid.slice(), startNode, finishNode)\r\n        if(!visitedNodeInOrder) return\r\n        const shortestPath = getShortestPath(finishNode)\r\n        this.animateDijkstra(visitedNodeInOrder, shortestPath)\r\n      }, 500);\r\n        \r\n    }\r\n\r\n    animateDepthFirstSearch = (visitedNodeInOrder, DFSPath) => {\r\n      const grid = this.state.grid\r\n      const {animationSpeed} = this.state\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(DFSPath, grid)\r\n          }, i * animationSpeed)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * animationSpeed)\r\n      }\r\n    }\r\n\r\n    visualizeDepthFirstSearch = () => {\r\n        this.setState({mousePointerEvents : 'none'})\r\n        this.clearVisitedNode(false)\r\n\r\n        setTimeout(()=>{\r\n          const {grid} = this.state\r\n          //console.log(grid)\r\n          const startNode = grid[START_POS_ROW][START_POS_COL]\r\n          const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n          //console.log(JSON.stringify(startNode)+\" \"+JSON.stringify(finishNode))\r\n          const visitedNodeInOrder = depthFirstSearch(grid.slice(), startNode, finishNode)\r\n          if(!visitedNodeInOrder) return\r\n          const DFSPath = getDFSPath(finishNode)\r\n          this.animateDepthFirstSearch(visitedNodeInOrder, DFSPath)  \r\n        },500)    \r\n    }\r\n\r\n    animateBreadthFirstSearch = (visitedNodeInOrder, DFSPath) => {\r\n      const grid = this.state.grid\r\n      const {animationSpeed} = this.state\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(DFSPath, grid)\r\n          }, i * animationSpeed)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * animationSpeed)\r\n      }\r\n    }\r\n\r\n\r\n    visualizeBreadthFirstSearch = () => {\r\n      this.setState({mousePointerEvents : 'none'})\r\n      this.clearVisitedNode(false)\r\n\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        console.log(grid)\r\n        const visitedNodeInOrder = breadthFristSearch(grid.slice(), startNode, finishNode)\r\n        if(!visitedNodeInOrder) return\r\n        //console.log(visitedNodeInOrder)\r\n        const BFSPath = getBFSPath(finishNode)\r\n        this.animateBreadthFirstSearch(visitedNodeInOrder, BFSPath)\r\n      }, 500)\r\n      \r\n    }\r\n\r\n    animateBestFirstSearch = (visitedNodeInOrder, GBFSPath) => {\r\n      const grid = this.state.grid\r\n      const {animationSpeed} = this.state\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(GBFSPath, grid)\r\n          }, i * animationSpeed)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * animationSpeed)\r\n      }\r\n    }\r\n\r\n    visualizeBestFirstSearch = () => {\r\n      this.setState({mousePointerEvents : 'none'})\r\n      this.clearVisitedNode(false)\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        //console.log(grid)\r\n        const visitedNodeInOrder = bestFirstSearch(grid.slice(), startNode, finishNode)\r\n        if(!visitedNodeInOrder) return\r\n        //console.log(visitedNodeInOrder)\r\n        const GBFSPath = getGBFSPath(finishNode)\r\n        //console.log(GBFSPath)\r\n        this.animateBestFirstSearch(visitedNodeInOrder, GBFSPath)\r\n      }, 500)   \r\n    }\r\n\r\n    animateAStarSearch = (visitedNodeInOrder, AStarPath) => {\r\n      const grid = this.state.grid\r\n      const {animationSpeed} = this.state\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(AStarPath, grid)\r\n          }, i * animationSpeed/1.5)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * animationSpeed/1.5)\r\n      }\r\n    }\r\n\r\n    visualizeAStarSearch = () => {\r\n      this.setState({mousePointerEvents : 'none'})\r\n      this.clearVisitedNode(false)\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        console.log(grid)\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        //console.log(grid)\r\n        const visitedNodeInOrder = aStarSearch(grid.slice(), startNode, finishNode)\r\n        if(!visitedNodeInOrder) return\r\n        console.log(visitedNodeInOrder)\r\n        const AStarPath = getAStarPath(finishNode)\r\n        //console.log(GBFSPath)\r\n        this.animateAStarSearch(visitedNodeInOrder, AStarPath)\r\n      }, 500)\r\n        \r\n    }\r\n\r\n    animateBidirectionalSearch = (visitedNodeInOrder, GBFSPath) => {\r\n      const grid = this.state.grid\r\n      const {animationSpeed} = this.state\r\n      for(let i = 0; i < visitedNodeInOrder.length; i++){\r\n        grid[visitedNodeInOrder[i].row][visitedNodeInOrder[i].col] = visitedNodeInOrder[i]\r\n        if(i === visitedNodeInOrder.length - 1){\r\n          setTimeout(() => {\r\n            this.printShortestPath(GBFSPath, grid)\r\n          }, i * animationSpeed/1.5)\r\n        }\r\n        setTimeout(() => {\r\n          const node = visitedNodeInOrder[i]\r\n          this.nodeRef[node.row][node.col].current.toggleVisited()\r\n        }, i * animationSpeed/1.5)\r\n      }\r\n    }\r\n\r\n    visualizeBidirectionalSearch = () => {\r\n      this.setState({mousePointerEvents : 'none'})\r\n      this.clearVisitedNode(false)\r\n      setTimeout(() => {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_POS_ROW][START_POS_COL]\r\n        const finishNode = grid[FINISH_POS_ROW][FINISH_POS_COL]\r\n        //console.log(grid)\r\n        const visitedNodeInOrder = bidirectionalSearch(grid.slice(), startNode, finishNode)\r\n        //console.log(visitedNodeInOrder.pop())\r\n        if(!visitedNodeInOrder) return\r\n        console.log(visitedNodeInOrder.length)\r\n        const middle1 = visitedNodeInOrder[visitedNodeInOrder.length - 1]\r\n        const path = getBidirectionalShortestPath(middle1, finishNode)\r\n        //console.log(middle1)\r\n        console.log(path)\r\n        this.animateBidirectionalSearch(visitedNodeInOrder, path)\r\n      }, 500)   \r\n    }\r\n\r\n    visualizeSelectedAlgorithm = () => {\r\n      const {selectedAlgorithm} = this.state;\r\n      console.log(selectedAlgorithm)\r\n      switch(selectedAlgorithm){\r\n        case \"Dijkstra Algorithm\":\r\n          this.visualizeDijkstra();\r\n          break;\r\n        case \"Depth first search\":\r\n          this.visualizeDepthFirstSearch();\r\n          break;\r\n        case \"Breadth frist search\":\r\n          this.visualizeBreadthFirstSearch();\r\n          break;\r\n        case \"Greedy Best first search\":\r\n          this.visualizeBestFirstSearch();\r\n          break;\r\n        case \"A* search\":\r\n          this.visualizeAStarSearch();\r\n          break;\r\n        case \"Bidirectional BFS\":\r\n          this.visualizeBidirectionalSearch();\r\n          break;\r\n        default:\r\n          window.alert(\"select an algorithm!\");\r\n      }\r\n\r\n    }\r\n\r\n    selectAlgorithm = (algorithm) => {\r\n      //console.log(algorithm)\r\n      this.setState({selectedAlgorithm : algorithm})\r\n      //console.log(this.state.selectedAlgorithm)\r\n    }\r\n\r\n    selectSpeed = (speed) => {\r\n      switch(speed){\r\n        case \"slow\":\r\n          this.setState({animationSpeed : SLOW_SPEED, speed : speed})\r\n          break;\r\n        case \"medium\":\r\n          this.setState({animationSpeed : MEDIUM_SPEED, speed : speed})\r\n          break;\r\n        case \"fast\":\r\n          this.setState({animationSpeed : FAST_SPEED, speed : speed})\r\n          break;\r\n      }\r\n    }\r\n\r\n    generateWalls = (algorithm) => {\r\n      const {grid} = this.state;\r\n      let wallsToAnimate = [];\r\n      switch(algorithm){\r\n        case \"recursive_division_horizontal\":\r\n          wallsToAnimate = recursiveDivsionUtil(grid, 2, grid.length - 3, 2, grid[0].length - 3, \"horizontal\", true);\r\n          break;\r\n        case \"recursive_division_vertical\":\r\n            wallsToAnimate = recursiveDivsionUtil(grid, 2, grid.length - 3, 2, grid[0].length - 3, \"vertical\", true);\r\n            break;\r\n      }\r\n      //console.log(wallsToAnimate)\r\n      this.animateWalls(wallsToAnimate);\r\n    }\r\n\r\n    animateWalls = (wallsToAnimate) => {\r\n      const {grid} = this.state;\r\n      for(let i = 0; i < wallsToAnimate.length; i++){\r\n        setTimeout(() => {\r\n          const node = wallsToAnimate.shift();\r\n          const {row, col} = node;\r\n          this.nodeRef[row][col].current.toggleWall();\r\n          grid[row][col].isWall = true;\r\n        }, 10 * i);\r\n      }\r\n    }\r\n\r\n    \r\n    render() {\r\n        const grid = this.state.grid\r\n        //console.log(grid)\r\n        //Building the grid with table and table data as Node component\r\n\r\n        \r\n\r\n        return (\r\n          <div className='container-fluid'>\r\n            <div>\r\n            <Navbar bg=\"light\">\r\n            <Navbar.Brand href=\"#\">Algorithm Visualizer</Navbar.Brand>\r\n            <NavDropdown title=\"Select Algorithm\" id=\"basic-nav-dropdown\" style={{ pointerEvents : this.state.mousePointerEvents }}>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"Dijkstra Algorithm\")}>Dijkstra</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"Depth first search\")}>Depth Fisrt Search</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"Breadth frist search\")}>Breadth Fisrt Search</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"Greedy Best first search\")}>Best Fisrt Search</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"A* search\")}>A* Search</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => this.selectAlgorithm(\"Bidirectional BFS\")}>Bidirectional Search (BFS)</NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown title=\"Generate Maze\" style={{ pointerEvents : this.state.mousePointerEvents }}>\r\n            <NavDropdown.Item onClick={() => this.generateWalls(\"recursive_division_horizontal\")}>Horizontal Recursive Division</NavDropdown.Item>\r\n            <NavDropdown.Item onClick={() => this.generateWalls(\"recursive_division_vertical\")}>Vertical Recursive Division</NavDropdown.Item>\r\n            </NavDropdown>\r\n            \r\n            <Nav.Link onClick={() => this.clearVisitedNode(true)} style={{ pointerEvents : this.state.mousePointerEvents }}>Clear Board</Nav.Link>\r\n            <Nav.Link className=\"btn btn-danger\" onClick={() => this.visualizeSelectedAlgorithm()} style={{ pointerEvents : this.state.mousePointerEvents }}>Visualize {this.state.selectedAlgorithm}</Nav.Link>\r\n            <NavDropdown title={`Speed: ${this.state.speed}`} style={{ pointerEvents : this.state.mousePointerEvents }}>\r\n              <NavDropdown.Item onClick={() => this.selectSpeed(\"fast\")}>Fast</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => this.selectSpeed(\"medium\")}>Medium</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => this.selectSpeed(\"slow\")}>Slow</NavDropdown.Item>\r\n            </NavDropdown>\r\n            </Navbar>\r\n            </div>\r\n            <div className=\"grid\" style={{ pointerEvents : this.state.mousePointerEvents }}>\r\n              <table>\r\n                <tbody>\r\n                  {grid.map((row, rowId) => {\r\n                    return (\r\n                      <tr className=\"tr-height\" key={rowId}>\r\n                        {row.map((column, columnId) => (\r\n                          <td key={columnId}>\r\n                            <Node\r\n                              row = {column.row}\r\n                              col = {column.col}\r\n                              isStart={column.isStart}\r\n                              isFinish={column.isFinish}\r\n                              isWall={column.isWall}\r\n                              isPath={column.isPath}\r\n                              isVisited={column.isVisited}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                              onMouseUp={() => this.handleMouseUp()}\r\n                              \r\n                              ref={this.nodeRef[column.row][column.col]}\r\n                            />\r\n                          </td>\r\n                        ))}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualizerComponent\r\n","import React from 'react';\nimport './App.css';\nimport Visualizer from './components/VisualizerComponent'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}